<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product - Admin Panel</title>
    <link rel="stylesheet" href="/styles/admin/admin.css">
    <link rel="stylesheet" href="/styles/admin/product_edit.css">
    <link rel="stylesheet" href="/styles/admin/simplified_edit.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <div class="main-container">
        <!-- Simple header with back button -->
        <div class="simplified-header">
            <a href="/admin/products_admin" class="back-button">
                <span>‚Üê Back to Products</span>
            </a>
            <h1>Edit Product</h1>
        </div>

        <div class="card">
            <div class="card-body">
                <form id="edit-product-form" enctype="multipart/form-data">
                    <input type="hidden" name="product_id" value="<%= product.product_id %>">

                    <div class="form-group">
                        <label>Product Name</label>
                        <input type="text" name="product_name" class="form-control" value="<%= product.product_name %>" required>
                    </div>

                    <div class="form-group">
                        <label>Category</label>
                        <select name="category_id" class="form-control" required>
                            <% categories.forEach(category => { %>
                                <option value="<%= category.category_id %>" <%= product.category_id === category.category_id ? 'selected' : '' %>>
                                    <%= category.category_name %>
                                </option>
                            <% }); %>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Description</label>
                        <textarea name="product_description" class="form-control" rows="5"><%= product.product_description %></textarea>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" name="product_is_display" class="form-check-input" id="displayCheck" <%= product.product_is_display ? 'checked' : '' %>>
                        <label class="form-check-label" for="displayCheck">Display Product</label>
                    </div>

                    <!-- VARIANTS SECTION -->
                    <h3>Product Variants</h3>
                    <div id="variants-container" data-count="<%= variants.length %>">
                        <% variants.forEach((variant, index) => { %>
                            <div class="variant-item">
                                <input type="hidden" name="variants[<%= index %>][id]" value="<%= variant.product_variant_id %>">
                                
                                <div class="form-row">
                                    <div class="form-group col">
                                        <label>Name</label>
                                        <input type="text" name="variants[<%= index %>][name]" class="form-control" 
                                              value="<%= variant.product_variant_name %>" required>
                                    </div>
                                    
                                    <div class="form-group col">
                                        <label>Price</label>
                                        <input type="number" name="variants[<%= index %>][price]" class="form-control" 
                                              value="<%= variant.product_variant_price %>" required>
                                    </div>
                                    
                                    <div class="form-group col">
                                        <label>Stock</label>
                                        <input type="number" name="variants[<%= index %>][stock]" class="form-control" 
                                              value="<%= variant.product_variant_available %>">
                                    </div>
                                    
                                    <div class="form-group col-auto">
                                        <label>&nbsp;</label>
                                        <button type="button" class="btn-admin btn-danger remove-variant">Remove</button>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                    
                    <button type="button" class="btn-admin btn-success" id="add-variant">Add Variant</button>

                    <!-- PRODUCT SPECIFICATIONS -->
                    <h3>Product Specifications</h3>
                    <div id="specs-container" data-count="<%= specs.length %>">
                        <% specs.forEach((spec, index) => { %>
                            <div class="spec-item">
                                <input type="hidden" name="specs[<%= index %>][id]" value="<%= spec.product_detail_id %>">
                                
                                <div class="form-row">
                                    <div class="form-group col">
                                        <label>Specification</label>
                                        <input type="text" name="specs[<%= index %>][name]" class="form-control" 
                                              value="<%= spec.product_detail_name %>">
                                    </div>
                                    
                                    <div class="form-group col">
                                        <label>Value</label>
                                        <input type="text" name="specs[<%= index %>][value]" class="form-control" 
                                              value="<%= spec.product_detail_value %>">
                                    </div>
                                    
                                    <div class="form-group col-auto">
                                        <label>&nbsp;</label>
                                        <button type="button" class="btn-admin btn-danger remove-spec">Remove</button>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                    
                    <button type="button" class="btn-admin btn-success" id="add-spec">Add Specification</button>

                    <!-- IMAGES SECTION - REDESIGNED -->
                    <h3>Product Images</h3>
                    <div class="image-gallery-container" id="image-gallery">
                        <% images.forEach(image => { %>
                            <div class="image-item">
                                <div class="image-preview">
                                    <img src="/imgs/product_image/P<%= product.product_id %>/<%= image.image_name %>" alt="Product Image">
                                </div>
                                <div class="image-actions">
                                    <label class="delete-image-checkbox">
                                        <input type="checkbox" name="delete_images" value="<%= image.image_id %>">
                                        <span class="delete-label">Delete</span>
                                    </label>
                                </div>
                            </div>
                        <% }); %>
                        <!-- New images will be dynamically added here -->
                    </div>

                    <div class="upload-new-images">
                        <h4>Upload New Images</h4>
                        <div id="new-images-container">
                            <div class="new-image-input">
                                <input type="file" name="new_image_1" class="form-control-file new-image-file" accept="image/*" onchange="previewImage(this)">
                            </div>
                        </div>
                        <button type="button" class="btn-admin btn-info" id="add-image">Add More Images</button>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn-admin btn-primary">Save Changes</button>
                        <a href="/admin/products_admin" class="btn-admin btn-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize counters
            var variantIndex = parseInt(document.getElementById('variants-container').dataset.count);
            var specIndex = parseInt(document.getElementById('specs-container').dataset.count);
            var imageIndex = 1;
            
            console.log("Product Edit Page Loaded - Product ID: <%= product.product_id %>");
            console.log("Initial variant count:", variantIndex);
            console.log("Initial spec count:", specIndex);

            // Image preview functionality
            window.previewImage = function(input) {
                if (input.files && input.files[0]) {
                    const reader = new FileReader();
                    const fileName = input.files[0].name;
                    console.log("Image selected for preview:", fileName);
                    
                    reader.onload = function(e) {
                        // Create a preview item with NEW tag
                        const gallery = document.getElementById('image-gallery');
                        const previewItem = document.createElement('div');
                        previewItem.className = 'image-item new-preview';
                        
                        previewItem.innerHTML = `
                            <div class="image-preview">
                                <img src="${e.target.result}" alt="New Image">
                                <span class="new-badge">NEW</span>
                            </div>
                            <div class="image-info">
                                <span class="file-name">${fileName}</span>
                            </div>
                        `;
                        
                        gallery.appendChild(previewItem);
                        console.log("Image preview added to gallery:", fileName);
                    };
                    
                    reader.readAsDataURL(input.files[0]);
                }
            };

            // Add Variant
            document.getElementById('add-variant').addEventListener('click', function() {
                console.log("Adding new variant:", variantIndex);
                const variantsContainer = document.getElementById('variants-container');
                const newVariant = document.createElement('div');
                newVariant.className = 'variant-item';
                
                var html = '';
                html += '<div class="form-row">';
                html += '    <div class="form-group col">';
                html += '        <label>Name</label>';
                html += '        <input type="text" name="variants[' + variantIndex + '][name]" class="form-control" required>';
                html += '    </div>';
                html += '    <div class="form-group col">';
                html += '        <label>Price</label>';
                html += '        <input type="number" name="variants[' + variantIndex + '][price]" class="form-control" required>';
                html += '    </div>';
                html += '    <div class="form-group col">';
                html += '        <label>Stock</label>';
                html += '        <input type="number" name="variants[' + variantIndex + '][stock]" class="form-control" value="100">';
                html += '    </div>';
                html += '    <div class="form-group col-auto">';
                html += '        <label>&nbsp;</label>';
                html += '        <button type="button" class="btn-admin btn-danger remove-variant">Remove</button>';
                html += '    </div>';
                html += '</div>';
                
                newVariant.innerHTML = html;
                variantsContainer.appendChild(newVariant);
                variantIndex++;

                // Add event listener to the new remove button
                newVariant.querySelector('.remove-variant').addEventListener('click', function() {
                    variantsContainer.removeChild(newVariant);
                });
            });

            // Add Specification
            document.getElementById('add-spec').addEventListener('click', function() {
                console.log("Adding new specification:", specIndex);
                const specsContainer = document.getElementById('specs-container');
                const newSpec = document.createElement('div');
                newSpec.className = 'spec-item';
                
                var html = '';
                html += '<div class="form-row">';
                html += '    <div class="form-group col">';
                html += '        <label>Specification</label>';
                html += '        <input type="text" name="specs[' + specIndex + '][name]" class="form-control">';
                html += '    </div>';
                html += '    <div class="form-group col">';
                html += '        <label>Value</label>';
                html += '        <input type="text" name="specs[' + specIndex + '][value]" class="form-control">';
                html += '    </div>';
                html += '    <div class="form-group col-auto">';
                html += '        <label>&nbsp;</label>';
                html += '        <button type="button" class="btn-admin btn-danger remove-spec">Remove</button>';
                html += '    </div>';
                html += '</div>';
                
                newSpec.innerHTML = html;
                specsContainer.appendChild(newSpec);
                specIndex++;

                // Add event listener to the new remove button
                newSpec.querySelector('.remove-spec').addEventListener('click', function() {
                    specsContainer.removeChild(newSpec);
                });
            });

            // Add Image
            document.getElementById('add-image').addEventListener('click', function() {
                imageIndex++;
                console.log("Adding new image input:", imageIndex);
                const newImagesContainer = document.getElementById('new-images-container');
                const newImageInput = document.createElement('div');
                newImageInput.className = 'new-image-input';
                
                var html = '';
                html += '<div class="image-input-wrapper">';
                html += '  <input type="file" name="new_image_' + imageIndex + '" class="form-control-file new-image-file" accept="image/*" onchange="previewImage(this)">';
                html += '  <button type="button" class="btn-admin btn-sm btn-danger remove-image-input">Remove</button>';
                html += '</div>';
                
                newImageInput.innerHTML = html;
                newImagesContainer.appendChild(newImageInput);
                
                // Add event listener to the new remove button
                newImageInput.querySelector('.remove-image-input').addEventListener('click', function() {
                    // Get the associated preview and remove it
                    const input = newImageInput.querySelector('.new-image-file');
                    const previews = document.querySelectorAll('.new-preview');
                    if (input.files && input.files[0] && previews.length > 0) {
                        // Find the newest preview that matches this file (simple approach)
                        const lastPreview = previews[previews.length - 1];
                        if (lastPreview) {
                            lastPreview.remove();
                        }
                    }
                    
                    // Remove the input
                    newImagesContainer.removeChild(newImageInput);
                });
            });

            // Add event listeners to existing remove buttons
            document.querySelectorAll('.remove-variant').forEach(function(button) {
                button.addEventListener('click', function() {
                    const variantItem = this.closest('.variant-item');
                    variantItem.parentNode.removeChild(variantItem);
                });
            });

            document.querySelectorAll('.remove-spec').forEach(function(button) {
                button.addEventListener('click', function() {
                    const specItem = this.closest('.spec-item');
                    specItem.parentNode.removeChild(specItem);
                });
            });

            // Form submission - Enhanced with better error handling and logging
            document.getElementById('edit-product-form').addEventListener('submit', function(e) {
                e.preventDefault();
                console.log("Form submission started");
                
                // Validate file inputs
                const fileInputs = document.querySelectorAll('.form-control-file');
                let hasValidFiles = true;
                let fileCount = 0;
                
                fileInputs.forEach(input => {
                    if (input.files && input.files.length > 0) {
                        fileCount++;
                        const file = input.files[0];
                        console.log("Validating file:", file.name, "Size:", (file.size / 1024 / 1024).toFixed(2) + "MB");
                        
                        // Check file type
                        if (!file.type.match('image.*')) {
                            console.error("Invalid file type:", file.type);
                            Swal.fire({
                                icon: 'error',
                                title: 'Invalid File',
                                text: 'Please select only image files'
                            });
                            hasValidFiles = false;
                            return;
                        }
                        
                        // Check file size (10MB max)
                        if (file.size > 10 * 1024 * 1024) {
                            console.error("File too large:", file.name);
                            Swal.fire({
                                icon: 'error',
                                title: 'File Too Large',
                                text: 'Image files must be less than 10MB'
                            });
                            hasValidFiles = false;
                            return;
                        }
                    }
                });
                
                console.log("File validation complete. Valid files:", hasValidFiles, "File count:", fileCount);
                
                if (!hasValidFiles) return;
                
                // Continue with form submission
                // Show loading indicator
                Swal.fire({
                    title: 'Saving changes...',
                    text: 'Please wait',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                const formData = new FormData(this);
                const productId = formData.get('product_id');
                
                console.log("Submitting form for product ID:", productId);
                console.log("Form values:", {
                    product_name: formData.get('product_name'),
                    category_id: formData.get('category_id'),
                    product_is_display: formData.has('product_is_display') ? 'Yes' : 'No',
                    "file count": document.querySelectorAll('input[type="file"]').length,
                    "filled file inputs": Array.from(document.querySelectorAll('input[type="file"]'))
                        .filter(input => input.files.length > 0).length
                });
                
                // Log any checked delete images
                const deleteImages = document.querySelectorAll('input[name="delete_images"]:checked');
                if (deleteImages.length > 0) {
                    console.log("Images marked for deletion:", 
                        Array.from(deleteImages).map(cb => cb.value).join(', '));
                }
                
                // Submit the form with fetch API - USING CORRECT URL
                fetch(`/admin/products_admin/update/${productId}`, {
                    method: 'POST',
                    body: formData
                })
                .then(function(response) {
                    console.log("Server response status:", response.status);
                    if (!response.ok) {
                        return response.text().then(text => {
                            try {
                                const jsonError = JSON.parse(text);
                                throw new Error(jsonError.message || 'Server responded with status: ' + response.status);
                            } catch (e) {
                                throw new Error('Server responded with status: ' + response.status);
                            }
                        });
                    }
                    return response.json();
                })
                .then(function(data) {
                    console.log("Server response data:", data);
                    if (data.status === 'success') {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: data.message || 'Product updated successfully',
                            confirmButtonText: 'OK'
                        }).then(function() {
                            console.log("Redirecting to products list");
                            window.location.href = '/admin/products_admin';
                        });
                    } else {
                        console.error("Error from server:", data.message);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'An error occurred while updating the product'
                        });
                    }
                })
                .catch(function(error) {
                    console.error('Error during form submission:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An unexpected error occurred: ' + error.message,
                        footer: '<a href="#" onclick="showDebugInfo()">Show Debug Info</a>'
                    });
                });
            });

            // Add debugging helper function
            function showDebugInfo() {
                const productId = document.querySelector('input[name="product_id"]').value;
                const files = document.querySelectorAll('input[type="file"]');
                
                let debugInfo = `Product ID: ${productId}\n`;
                debugInfo += `Total file inputs: ${files.length}\n`;
                debugInfo += 'Files with data:\n';
                
                files.forEach((input, i) => {
                    if (input.files.length > 0) {
                        const file = input.files[0];
                        debugInfo += `- ${input.name}: ${file.name} (${(file.size/1024).toFixed(2)}KB)\n`;
                    }
                });
                
                Swal.fire({
                    title: 'Debug Information',
                    html: '<pre style="text-align: left;">' + debugInfo + '</pre>',
                    customClass: {
                        popup: 'debug-popup'
                    }
                });
            }
        });
    </script>

    <style>
        /* Add styling for debug popup */
        .debug-popup {
            max-width: 600px !important;
        }
        .debug-popup pre {
            background-color: #f5f5f5;
            padding: 10px;
            border-radius: 5px;
            white-space: pre-wrap;
            overflow-wrap: break-word;
        }
    </style>
</body>
</html>
