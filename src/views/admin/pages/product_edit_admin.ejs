<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product - Admin Panel</title>
    <link rel="stylesheet" href="/styles/admin/admin.css">
    <link rel="stylesheet" href="/styles/admin/product_edit.css">
    <link rel="stylesheet" href="/styles/admin/simplified_edit.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <div class="main-container">
        <!-- Simple header with back button -->
        <div class="simplified-header">
            <a href="/admin/products_admin" class="back-button">
                <span>‚Üê Back to Products</span>
            </a>
            <h1>Edit Product</h1>
        </div>

        <div class="card">
            <div class="card-body">
                <form id="edit-product-form" enctype="multipart/form-data">
                    <input type="hidden" name="product_id" value="<%= product.product_id %>">
                    <input type="hidden" name="original_data" id="original_data" value="">

                    <div class="form-group">
                        <label>Product Name</label>
                        <input type="text" name="product_name" class="form-control track-change" value="<%= product.product_name %>" required>
                    </div>

                    <div class="form-group">
                        <label>Category</label>
                        <select name="category_id" class="form-control track-change" required>
                            <% categories.forEach(category => { %>
                                <option value="<%= category.category_id %>" <%= product.category_id === category.category_id ? 'selected' : '' %>>
                                    <%= category.category_name %>
                                </option>
                            <% }); %>
                        </select>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label>Supplier</label>
                            <select name="supplier_id" class="form-control track-change">
                                <option value="">Select Supplier</option>
                                <% suppliers && suppliers.forEach(supplier => { %>
                                    <option value="<%= supplier.supplier_id %>" <%= product.supplier_id === supplier.supplier_id ? 'selected' : '' %>>
                                        <%= supplier.supplier_name %>
                                    </option>
                                <% }); %>
                            </select>
                        </div>
                        
                        <div class="form-group col">
                            <label>Product Period (months)</label>
                            <input type="number" name="product_period" class="form-control track-change" value="<%= product.product_period || 12 %>">
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <div class="checkbox-group">
                                <div class="checkbox-item">
                                    <input type="checkbox" name="product_is_bestseller" id="bestsellerCheck" class="form-check-input track-change" <%= product.product_is_bestseller ? 'checked' : '' %>>
                                    <label class="form-check-label" for="bestsellerCheck">Bestseller Product</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            <div class="checkbox-group">
                                <div class="checkbox-item">
                                    <input type="checkbox" name="product_is_display" id="displayCheck" class="form-check-input track-change" <%= product.product_is_display ? 'checked' : '' %>>
                                    <label class="form-check-label" for="displayCheck">Display Product</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Description</label>
                        <textarea name="product_description" class="form-control track-change" rows="5"><%= product.product_description %></textarea>
                    </div>

                    <!-- PRODUCT IMAGES SECTION -->
                    <h3>Product Images</h3>
                    <p class="note">First image will be used as the product avatar</p>
                    
                    <div class="image-gallery-container" id="image-gallery">
                        <% images.forEach((image, index) => { %>
                            <div class="image-item <%= index === 0 ? 'avatar-image' : '' %>" data-image-id="<%= image.image_id %>">
                                <div class="image-preview">
                                    <img src="/imgs/product_image/P<%= product.product_id %>/<%= image.image_name %>" alt="Product Image">
                                    <% if(index === 0) { %>
                                        <span class="avatar-badge">Avatar</span>
                                    <% } %>
                                </div>
                                <div class="image-actions">
                                    <label class="image-display-checkbox">
                                        <input type="checkbox" name="image_is_display_<%= image.image_id %>" class="track-change" <%= image.image_is_display ? 'checked' : '' %>>
                                        <span class="display-label">Display</span>
                                    </label>
                                    <% if (index !== 0 || images.length > 1) { %>
                                        <label class="delete-image-checkbox">
                                            <input type="checkbox" name="delete_images" value="<%= image.image_id %>">
                                            <span class="delete-label">Delete</span>
                                        </label>
                                    <% } %>
                                </div>
                            </div>
                        <% }); %>
                    </div>

                    <div class="upload-new-images">
                        <h4>Upload New Images</h4>
                        <div id="new-images-container">
                            <div class="new-image-input">
                                <input type="file" name="new_image_1" class="form-control-file new-image-file" accept="image/*" onchange="previewImage(this)">
                            </div>
                        </div>
                        <button type="button" class="btn-admin btn-info" id="add-image">Add More Images</button>
                    </div>

                    <!-- VARIANTS SECTION -->
                    <h3>Product Variants</h3>
                    <div id="variants-container" data-count="<%= variants.length %>">
                        <% variants.forEach((variant, index) => { %>
                            <div class="variant-item" data-index="<%= index %>">
                                <input type="hidden" name="variants[<%= index %>][id]" value="<%= variant.product_variant_id %>">
                                
                                <div class="variant-header">
                                    <h4>Variant #<%= index+1 %></h4>
                                    <% if(variants.length > 1) { %>
                                        <button type="button" class="btn-admin btn-danger btn-sm remove-variant">Remove</button>
                                    <% } %>
                                </div>
                                
                                <div class="variant-body">
                                    <div class="form-row">
                                        <div class="form-group col">
                                            <label>Name</label>
                                            <input type="text" name="variants[<%= index %>][name]" class="form-control variant-name track-change" 
                                                value="<%= variant.product_variant_name %>" required>
                                        </div>
                                        
                                        <div class="form-group col">
                                            <label>Price</label>
                                            <input type="number" name="variants[<%= index %>][price]" class="form-control track-change" 
                                                value="<%= variant.product_variant_price %>" required>
                                        </div>
                                        
                                        <div class="form-group col">
                                            <label>Stock</label>
                                            <input type="number" name="variants[<%= index %>][stock]" class="form-control track-change" 
                                                value="<%= variant.product_variant_available %>">
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group col">
                                            <label>Discount</label>
                                            <select name="variants[<%= index %>][discount_id]" class="form-control track-change">
                                                <option value="">No Discount</option>
                                                <% discounts && discounts.forEach(discount => { %>
                                                    <option value="<%= discount.discount_id %>" 
                                                        <%= variant.discount_id === discount.discount_id ? 'selected' : '' %>>
                                                        <%= discount.discount_name %> (<%= discount.discount_amount %>%)
                                                    </option>
                                                <% }); %>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group col-md-4">
                                            <div class="checkbox-group">
                                                <div class="checkbox-item">
                                                    <input type="checkbox" id="variant_bestseller_<%= index %>" 
                                                        name="variants[<%= index %>][is_bestseller]" class="track-change"
                                                        <%= variant.product_variant_is_bestseller ? 'checked' : '' %>>
                                                    <label for="variant_bestseller_<%= index %>">Bestseller</label>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="form-group col-md-4">
                                            <div class="checkbox-group">
                                                <div class="checkbox-item">
                                                    <input type="checkbox" id="variant_stock_<%= index %>" 
                                                        name="variants[<%= index %>][is_stock]" class="track-change"
                                                        <%= variant.product_variant_is_stock ? 'checked' : '' %>>
                                                    <label for="variant_stock_<%= index %>">In Stock</label>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="form-group col-md-4">
                                            <div class="checkbox-group">
                                                <div class="checkbox-item">
                                                    <input type="checkbox" id="variant_display_<%= index %>" 
                                                        name="variants[<%= index %>][is_display]" class="track-change"
                                                        <%= variant.product_variant_is_display ? 'checked' : '' %>>
                                                    <label for="variant_display_<%= index %>">Display</label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                    
                    <button type="button" class="btn-admin btn-success" id="add-variant">Add Variant</button>

                    <!-- PRODUCT SPECIFICATIONS -->
                    <h3>Product Specifications</h3>
                    <div id="specs-container" data-count="<%= specs.length %>">
                        <% specs.forEach((spec, index) => { %>
                            <div class="spec-item" data-index="<%= index %>">
                                <input type="hidden" name="specs[<%= index %>][id]" value="<%= spec.product_detail_id %>">
                                
                                <div class="form-row">
                                    <div class="form-group col">
                                        <label>Specification</label>
                                        <input type="text" name="specs[<%= index %>][name]" class="form-control track-change" 
                                              value="<%= spec.product_detail_name %>">
                                    </div>
                                    
                                    <div class="form-group col">
                                        <label>Value</label>
                                        <input type="text" name="specs[<%= index %>][value]" class="form-control track-change" 
                                              value="<%= spec.product_detail_value %>">
                                    </div>

                                    <div class="form-group col">
                                        <label>Unit</label>
                                        <input type="text" name="specs[<%= index %>][unit]" class="form-control track-change" 
                                              value="<%= spec.product_detail_unit %>">
                                    </div>
                                    
                                    <div class="form-group col-auto">
                                        <label>&nbsp;</label>
                                        <button type="button" class="btn-admin btn-danger remove-spec">Remove</button>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                    
                    <button type="button" class="btn-admin btn-success" id="add-spec">Add Specification</button>

                    <div class="form-actions">
                        <button type="submit" class="btn-admin btn-primary">Save Changes</button>
                        <a href="/admin/products_admin" class="btn-admin btn-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize counters
            var variantIndex = parseInt(document.getElementById('variants-container').dataset.count);
            var specIndex = parseInt(document.getElementById('specs-container').dataset.count);
            var imageIndex = 1;
            const changedFields = new Set();
            
            // Store original form data for comparison
            const storeOriginalData = () => {
                const form = document.getElementById('edit-product-form');
                const formData = new FormData(form);
                const originalData = {};
                
                formData.forEach((value, key) => {
                    if (key !== 'original_data' && !(value instanceof File)) {
                        originalData[key] = value;
                    }
                });
                
                document.getElementById('original_data').value = JSON.stringify(originalData);
                console.log("Original form data stored");
            };
            
            // Track changes to form fields
            document.querySelectorAll('.track-change').forEach(element => {
                const originalValue = element.type === 'checkbox' ? element.checked : element.value;
                element.dataset.originalValue = element.type === 'checkbox' ? 
                    (element.checked ? 'checked' : '') : originalValue;
                
                element.addEventListener('change', function() {
                    const currentValue = this.type === 'checkbox' ? this.checked : this.value;
                    const originalValue = this.type === 'checkbox' ? 
                        (this.dataset.originalValue === 'checked') : this.dataset.originalValue;
                    
                    if ((this.type === 'checkbox' && currentValue !== (originalValue === 'checked')) || 
                        (this.type !== 'checkbox' && currentValue !== originalValue)) {
                        changedFields.add(this.name);
                        this.classList.add('field-changed');
                    } else {
                        changedFields.delete(this.name);
                        this.classList.remove('field-changed');
                    }
                    
                    console.log("Changed fields:", Array.from(changedFields));
                });
            });
            
            // Call storeOriginalData after everything is set up
            storeOriginalData();
            
            console.log("Product Edit Page Loaded - Product ID: <%= product.product_id %>");

            // Image preview functionality
            window.previewImage = function(input) {
                if (input.files && input.files[0]) {
                    const reader = new FileReader();
                    const fileName = input.files[0].name;
                    console.log("Image selected for preview:", fileName);
                    
                    reader.onload = function(e) {
                        // Create a preview item with NEW tag
                        const gallery = document.getElementById('image-gallery');
                        const previewItem = document.createElement('div');
                        previewItem.className = 'image-item new-preview';
                        
                        previewItem.innerHTML = `
                            <div class="image-preview">
                                <img src="${e.target.result}" alt="New Image">
                                <span class="new-badge">NEW</span>
                            </div>
                            <div class="image-info">
                                <span class="file-name">${fileName}</span>
                            </div>
                        `;
                        
                        gallery.appendChild(previewItem);
                        console.log("Image preview added to gallery:", fileName);
                    };
                    
                    reader.readAsDataURL(input.files[0]);
                }
            };
            
            // Reorder images functionality - Make first image be the avatar
            const updateAvatarBadges = () => {
                const imageItems = document.querySelectorAll('.image-item');
                imageItems.forEach((item, index) => {
                    const badge = item.querySelector('.avatar-badge');
                    
                    if (index === 0) {
                        if (!badge) {
                            const newBadge = document.createElement('span');
                            newBadge.className = 'avatar-badge';
                            newBadge.textContent = 'Avatar';
                            item.querySelector('.image-preview').appendChild(newBadge);
                        }
                        item.classList.add('avatar-image');
                    } else {
                        if (badge) badge.remove();
                        item.classList.remove('avatar-image');
                    }
                });
            };

            // Add Variant - Fixed implementation that separates EJS from client-side JS
            document.getElementById('add-variant').addEventListener('click', function() {
                console.log("Adding new variant:", variantIndex);
                const variantsContainer = document.getElementById('variants-container');
                const newVariant = document.createElement('div');
                newVariant.className = 'variant-item';
                newVariant.dataset.index = variantIndex;
                
                // Create the variant HTML - Using only client-side JS variables
                var html = `
                    <div class="variant-header">
                        <h4>Variant #${variantIndex + 1}</h4>
                        <button type="button" class="btn-admin btn-danger btn-sm remove-variant">Remove</button>
                    </div>
                    <div class="variant-body">
                        <div class="form-row">
                            <div class="form-group col">
                                <label>Name</label>
                                <input type="text" name="variants[${variantIndex}][name]" class="form-control variant-name track-change" required>
                            </div>
                            <div class="form-group col">
                                <label>Price</label>
                                <input type="number" name="variants[${variantIndex}][price]" class="form-control track-change" required>
                            </div>
                            <div class="form-group col">
                                <label>Stock</label>
                                <input type="number" name="variants[${variantIndex}][stock]" class="form-control track-change" value="100">
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group col">
                                <label>Discount</label>
                                <select name="variants[${variantIndex}][discount_id]" class="form-control track-change">
                                    ${discountOptionsHtml}
                                </select>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group col-md-4">
                                <div class="checkbox-group">
                                    <div class="checkbox-item">
                                        <input type="checkbox" id="variant_bestseller_${variantIndex}" 
                                            name="variants[${variantIndex}][is_bestseller]" class="track-change">
                                        <label for="variant_bestseller_${variantIndex}">Bestseller</label>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                <div class="checkbox-group">
                                    <div class="checkbox-item">
                                        <input type="checkbox" id="variant_stock_${variantIndex}" 
                                            name="variants[${variantIndex}][is_stock]" class="track-change" checked>
                                        <label for="variant_stock_${variantIndex}">In Stock</label>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                <div class="checkbox-group">
                                    <div class="checkbox-item">
                                        <input type="checkbox" id="variant_display_${variantIndex}" 
                                            name="variants[${variantIndex}][is_display]" class="track-change" checked>
                                        <label for="variant_display_${variantIndex}">Display</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                newVariant.innerHTML = html;
                variantsContainer.appendChild(newVariant);
                variantIndex++;

                // Add event listener to the new remove button
                newVariant.querySelector('.remove-variant').addEventListener('click', function() {
                    variantsContainer.removeChild(newVariant);
                    updateVariantRemoveButtons();
                });
                
                // Update track-change listeners for new elements
                newVariant.querySelectorAll('.track-change').forEach(element => {
                    const originalValue = element.type === 'checkbox' ? element.checked : element.value;
                    element.dataset.originalValue = element.type === 'checkbox' ? 
                        (element.checked ? 'checked' : '') : originalValue;
                    
                    element.addEventListener('change', function() {
                        const currentValue = this.type === 'checkbox' ? this.checked : this.value;
                        const originalValue = this.type === 'checkbox' ? 
                            (this.dataset.originalValue === 'checked') : this.dataset.originalValue;
                        
                        if ((this.type === 'checkbox' && currentValue !== (originalValue === 'checked')) || 
                            (this.type !== 'checkbox' && currentValue !== originalValue)) {
                            changedFields.add(this.name);
                            this.classList.add('field-changed');
                        } else {
                            changedFields.delete(this.name);
                            this.classList.remove('field-changed');
                        }
                    });
                });
                
                // Update variant remove buttons (hide if only one variant)
                updateVariantRemoveButtons();
            });

            // Update variant remove buttons visibility
            function updateVariantRemoveButtons() {
                const variants = document.querySelectorAll('.variant-item');
                
                // If only one variant remains, hide its remove button
                if (variants.length === 1) {
                    const removeBtn = variants[0].querySelector('.remove-variant');
                    if (removeBtn) removeBtn.style.display = 'none';
                } 
                // Otherwise show remove buttons on all variants
                else {
                    variants.forEach(variant => {
                        const removeBtn = variant.querySelector('.remove-variant');
                        if (removeBtn) removeBtn.style.display = 'block';
                    });
                }
                
                // Renumber the variants
                variants.forEach((variant, idx) => {
                    const header = variant.querySelector('.variant-header h4');
                    if (header) header.textContent = `Variant #${idx+1}`;
                });
            }

            // Add Specification
            document.getElementById('add-spec').addEventListener('click', function() {
                console.log("Adding new specification:", specIndex);
                const specsContainer = document.getElementById('specs-container');
                const newSpec = document.createElement('div');
                newSpec.className = 'spec-item';
                newSpec.dataset.index = specIndex;
                
                var html = `
                    <div class="form-row">
                        <div class="form-group col">
                            <label>Specification</label>
                            <input type="text" name="specs[${specIndex}][name]" class="form-control track-change">
                        </div>
                        <div class="form-group col">
                            <label>Value</label>
                            <input type="text" name="specs[${specIndex}][value]" class="form-control track-change">
                        </div>
                        <div class="form-group col">
                            <label>Unit</label>
                            <input type="text" name="specs[${specIndex}][unit]" class="form-control track-change">
                        </div>
                        <div class="form-group col-auto">
                            <label>&nbsp;</label>
                            <button type="button" class="btn-admin btn-danger remove-spec">Remove</button>
                        </div>
                    </div>
                `;
                
                newSpec.innerHTML = html;
                specsContainer.appendChild(newSpec);
                specIndex++;

                // Add event listener to the new remove button
                newSpec.querySelector('.remove-spec').addEventListener('click', function() {
                    specsContainer.removeChild(newSpec);
                });
                
                // Add track-change listeners
                newSpec.querySelectorAll('.track-change').forEach(element => {
                    const originalValue = element.value;
                    element.dataset.originalValue = originalValue;
                    
                    element.addEventListener('change', function() {
                        if (this.value !== this.dataset.originalValue) {
                            changedFields.add(this.name);
                            this.classList.add('field-changed');
                        } else {
                            changedFields.delete(this.name);
                            this.classList.remove('field-changed');
                        }
                    });
                });
            });

            // Add Image
            document.getElementById('add-image').addEventListener('click', function() {
                imageIndex++;
                console.log("Adding new image input:", imageIndex);
                const newImagesContainer = document.getElementById('new-images-container');
                const newImageInput = document.createElement('div');
                newImageInput.className = 'new-image-input';
                
                var html = `
                    <div class="image-input-wrapper">
                        <input type="file" name="new_image_${imageIndex}" class="form-control-file new-image-file" accept="image/*" onchange="previewImage(this)">
                        <button type="button" class="btn-admin btn-sm btn-danger remove-image-input">Remove</button>
                    </div>
                `;
                
                newImageInput.innerHTML = html;
                newImagesContainer.appendChild(newImageInput);
                
                // Add event listener to the new remove button
                newImageInput.querySelector('.remove-image-input').addEventListener('click', function() {
                    // Get the associated preview and remove it
                    const input = newImageInput.querySelector('.new-image-file');
                    const previews = document.querySelectorAll('.new-preview');
                    if (input.files && input.files[0] && previews.length > 0) {
                        // Find the newest preview that matches this file (simple approach)
                        const lastPreview = previews[previews.length - 1];
                        if (lastPreview) {
                            lastPreview.remove();
                        }
                    }
                    
                    // Remove the input
                    newImagesContainer.removeChild(newImageInput);
                });
            });

            // Add event listeners to existing remove buttons
            document.querySelectorAll('.remove-variant').forEach(function(button) {
                button.addEventListener('click', function() {
                    const variantItem = this.closest('.variant-item');
                    variantItem.parentNode.removeChild(variantItem);
                    updateVariantRemoveButtons();
                });
            });

            document.querySelectorAll('.remove-spec').forEach(function(button) {
                button.addEventListener('click', function() {
                    const specItem = this.closest('.spec-item');
                    specItem.parentNode.removeChild(specItem);
                });
            });
            
            // Make image items sortable (for avatar selection)
            const imageItems = document.querySelectorAll('.image-item');
            imageItems.forEach(item => {
                item.addEventListener('click', function(e) {
                    // Skip if clicking on a checkbox or button
                    if (e.target.tagName === 'INPUT' || e.target.tagName === 'BUTTON' || 
                        e.target.classList.contains('delete-label') || 
                        e.target.classList.contains('display-label')) {
                        return;
                    }
                    
                    // Move this item to the start (make it the avatar)
                    const gallery = document.getElementById('image-gallery');
                    const firstItem = gallery.firstElementChild;
                    
                    if (this !== firstItem) {
                        gallery.insertBefore(this, firstItem);
                        updateAvatarBadges();
                        
                        // Mark form as changed
                        changedFields.add('avatar_changed');
                        console.log("Avatar image changed");
                    }
                });
            });

            // Initialize variant remove buttons
            updateVariantRemoveButtons();
            
            // Form submission - Enhanced with better error handling and change tracking
            document.getElementById('edit-product-form').addEventListener('submit', function(e) {
                e.preventDefault();
                console.log("Form submission started");
                
                // Validate file inputs
                const fileInputs = document.querySelectorAll('.form-control-file');
                let hasValidFiles = true;
                let fileCount = 0;
                
                fileInputs.forEach(input => {
                    if (input.files && input.files.length > 0) {
                        fileCount++;
                        const file = input.files[0];
                        console.log("Validating file:", file.name, "Size:", (file.size / 1024 / 1024).toFixed(2) + "MB");
                        
                        // Check file type
                        if (!file.type.match('image.*')) {
                            console.error("Invalid file type:", file.type);
                            Swal.fire({
                                icon: 'error',
                                title: 'Invalid File',
                                text: 'Please select only image files'
                            });
                            hasValidFiles = false;
                            return;
                        }
                        
                        // Check file size (10MB max)
                        if (file.size > 10 * 1024 * 1024) {
                            console.error("File too large:", file.name);
                            Swal.fire({
                                icon: 'error',
                                title: 'File Too Large',
                                text: 'Image files must be less than 10MB'
                            });
                            hasValidFiles = false;
                            return;
                        }
                    }
                });
                
                console.log("File validation complete. Valid files:", hasValidFiles, "File count:", fileCount);
                
                if (!hasValidFiles) return;
                
                // Check if we would be left with at least one image
                const existingImageCount = document.querySelectorAll('.image-item:not(.new-preview)').length;
                const deleteCheckboxes = document.querySelectorAll('input[name="delete_images"]:checked');
                
                if (existingImageCount - deleteCheckboxes.length + fileCount < 1) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Product must have at least one image for the avatar'
                    });
                    return;
                }
                
                // Make sure we have at least one variant
                const variants = document.querySelectorAll('.variant-item');
                if (variants.length === 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Product must have at least one variant'
                    });
                    return;
                }
                
                // Add the list of changed fields to the form data for optimized updates
                const changedFieldsInput = document.createElement('input');
                changedFieldsInput.type = 'hidden';
                changedFieldsInput.name = 'changed_fields';
                changedFieldsInput.value = JSON.stringify(Array.from(changedFields));
                this.appendChild(changedFieldsInput);
                
                // Continue with form submission
                // Show loading indicator
                Swal.fire({
                    title: 'Saving changes...',
                    text: 'Please wait',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                const formData = new FormData(this);
                const productId = formData.get('product_id');
                
                console.log("Submitting form for product ID:", productId);
                
                // Submit the form with fetch API
                fetch(`/admin/products_admin/update/${productId}`, {
                    method: 'POST',
                    body: formData
                })
                .then(function(response) {
                    console.log("Server response status:", response.status);
                    if (!response.ok) {
                        return response.text().then(text => {
                            try {
                                const jsonError = JSON.parse(text);
                                throw new Error(jsonError.message || 'Server responded with status: ' + response.status);
                            } catch (e) {
                                throw new Error('Server responded with status: ' + response.status);
                            }
                        });
                    }
                    return response.json();
                })
                .then(function(data) {
                    console.log("Server response data:", data);
                    if (data.status === 'success') {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: data.message || 'Product updated successfully',
                            confirmButtonText: 'OK'
                        }).then(function() {
                            console.log("Redirecting to products list");
                            window.location.href = '/admin/products_admin';
                        });
                    } else {
                        console.error("Error from server:", data.message);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'An error occurred while updating the product'
                        });
                    }
                })
                .catch(function(error) {
                    console.error('Error during form submission:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An unexpected error occurred: ' + error.message,
                        footer: '<a href="#" onclick="showDebugInfo()">Show Debug Info</a>'
                    });
                });
            });

            // Debug helper function
            window.showDebugInfo = function() {
                const productId = document.querySelector('input[name="product_id"]').value;
                const files = document.querySelectorAll('input[type="file"]');
                
                let debugInfo = `Product ID: ${productId}\n`;
                debugInfo += `Total file inputs: ${files.length}\n`;
                debugInfo += 'Files with data:\n';
                
                files.forEach((input, i) => {
                    if (input.files.length > 0) {
                        const file = input.files[0];
                        debugInfo += `- ${input.name}: ${file.name} (${(file.size/1024).toFixed(2)}KB)\n`;
                    }
                });
                
                debugInfo += '\nChanged Fields:\n';
                debugInfo += Array.from(changedFields).join('\n');
                
                Swal.fire({
                    title: 'Debug Information',
                    html: '<pre style="text-align: left;">' + debugInfo + '</pre>',
                    customClass: {
                        popup: 'debug-popup'
                    }
                });
            };
        });
    </script>

    <style>
        /* Enhanced styling for the product edit form */
        .variant-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #f5f5f5;
            padding: 10px;
            border-radius: 4px 4px 0 0;
            margin-bottom: 10px;
        }
        
        .variant-header h4 {
            margin: 0;
        }
        
        .variant-body {
            padding: 0 10px 10px;
        }
        
        .variant-item {
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 15px;
            background-color: #fff;
        }
        
        .checkbox-group {
            display: flex;
            flex-direction: column;
        }
        
        .checkbox-item {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        
        .checkbox-item label {
            margin-left: 5px;
            margin-bottom: 0;
        }
        
        .note {
            font-size: 0.9rem;
            color: #666;
            margin-top: -10px;
            margin-bottom: 10px;
        }
        
        .image-gallery-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .image-item {
            width: 150px;
            border: 1px solid #ddd;
            border-radius: 4px;
            overflow: hidden;
            position: relative;
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        .image-item:hover {
            transform: scale(1.05);
            border-color: #007bff;
        }
        
        .image-item.avatar-image {
            border-color: #28a745;
            border-width: 2px;
        }
        
        .avatar-badge {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: #28a745;
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.75rem;
        }
        
        .new-badge {
            position: absolute;
            top: 5px;
            left: 5px;
            background-color: #007bff;
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.75rem;
        }
        
        .image-actions {
            display: flex;
            justify-content: space-between;
            padding: 5px;
            background-color: #f5f5f5;
        }
        
        .delete-image-checkbox, .image-display-checkbox {
            display: flex;
            align-items: center;
            font-size: 0.75rem;
        }
        
        .delete-label {
            color: #dc3545;
        }
        
        .display-label {
            color: #007bff;
        }
        
        .field-changed {
            border-color: #ffc107;
            background-color: #fff8e1;
        }
        
        /* Add styling for debug popup */
        .debug-popup {
            max-width: 600px !important;
        }
        
        .debug-popup pre {
            background-color: #f5f5f5;
            padding: 10px;
            border-radius: 5px;
            white-space: pre-wrap;
            overflow-wrap: break-word;
        }
    </style>
    
    <script src="/js/admin-debug.js"></script>
</body>
</html>
